AWSTemplateFormatVersion: "2010-09-09"
Description: |
    Consider Templating Engine: https://jinja.palletsprojects.com/en/3.0.x/nativetypes/#examples with Resource.Metadata Value(s)
Transform: AWS::Serverless-2016-10-31

Globals: { Function: { Runtime: "nodejs14.x", Architectures: [ "x86_64" ], MemorySize: 128, Timeout: 30, Environment: { Variables: { AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 } } } }

Parameters:
    Stage:
        Type: String
        Default: Development

Resources:
    Logging:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub "${AWS::StackName}-Service-Level-Log-Group"

    API:
        Type: AWS::Serverless::HttpApi
        Properties:
            Description: "Service API Gateway"
            StageName: !Ref Stage
            AccessLogSettings:
                DestinationArn: !GetAtt Logging.Arn
                Format: >-
                    { "Request-ID": "$context.requestId", \
                    "IP": "$context.identity.sourceIp", \
                    "Caller": "$context.identity.caller", \
                    "User": "$context.identity.user", \
                    "Duration": "$context.requestTime", \
                    "HTTP-Method": "$context.httpMethod", \
                    "Endpoint": "$context.resourcePath", \
                    "Status": "$context.status", \
                    "Response-Length": "$context.responseLength" }
            # Auth: HttpApiAuth
            CorsConfiguration: True
            DisableExecuteApiEndpoint: False

    List: # --> List All Secrets, Sanitized
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Join [ "-", [ "Secrets-Management-Service", "List", "Secrets", "Sanitized" ] ]
            Description: "List All Secrets, Sanitized"
            Handler: !Join [ "/", [ "source", "list-secrets", "src", "index.handler" ] ]
            Policies:
                - AWSLambdaBasicExecutionRole
                -
                    Version: "2012-10-17"
                    Statement:
                        -   Effect: "Allow"
                            Action:
                                - secretsmanager:GetResourcePolicy
                                - secretsmanager:DescribeSecret
                                - secretsmanager:ListSecretVersionIds
                                - secretsmanager:ListSecrets
                            Resource: "*"
            Events:
                API:
                    Type: HttpApi
                    Properties:
                        ApiId: !Ref API
                        TimeoutInMillis: 15000
                        PayloadFormatVersion: "2.0"
                        Path: "/api/secrets"
                        Method: "GET"
                        RouteSettings:
                            ThrottlingBurstLimit: 600

    Administration: # --> List All Secrets, Sanitized, Administrative
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Join [ "-", [ "Secrets-Management-Service", "List", "Secrets", "Administrative" ] ]
            Description: "List All Secrets, Sanitized, Administrative"
            Handler: !Join [ "/", [ "source", "administration", "src", "index.handler" ] ]
            Policies:
                - AWSLambdaBasicExecutionRole
                -
                    Version: "2012-10-17"
                    Statement:
                        -   Effect: "Allow"
                            Action:
                                - secretsmanager:GetResourcePolicy
                                - secretsmanager:DescribeSecret
                                - secretsmanager:ListSecretVersionIds
                                - secretsmanager:ListSecrets
                            Resource: "*"
            Events: { API: { Type: "Api", Properties: { Path: "/api/secrets/administration", Method: "GET" } } }

    Query: # --> Get Secret via AWS-ID, ARN, ID
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Join [ "-", [ "Secrets-Management-Service", "Get", "Secret", "Sanitized" ] ]
            Description: "Get Secret via AWS-ID, ARN, ID"
            Handler: !Join [ "/", [ "source", "get-secret", "src", "index.handler" ] ]
            Policies:
                - AWSLambdaBasicExecutionRole
                -
                    Version: "2012-10-17"
                    Statement:
                        -   Effect: "Allow"
                            Action:
                                - secretsmanager:GetResourcePolicy
                                - secretsmanager:DescribeSecret
                                - secretsmanager:ListSecretVersionIds
                                - secretsmanager:ListSecrets
                            Resource: "*"
            Events: { API: { Type: "Api", Properties: { Path: "/api/secret", Method: "GET" } } }

Outputs:
    Endpoint:
        Description: "API Gateway URL"
        Value:
            Fn::Sub: "https://${API}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/"
    ID:
        Description: "API Application ID"
        Value:
            Ref: API